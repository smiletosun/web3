/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Callee,
  CalleeInterface,
} from "../../../contracts/Call.sol/Callee";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_x",
        type: "uint256",
      },
    ],
    name: "setX",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_x",
        type: "uint256",
      },
    ],
    name: "setXandSendEther",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "value",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "x",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610238806100206000396000f3fe60806040526004361061003f5760003560e01c80630c55699c146100445780633fa4f2451461006f5780634018d9aa1461009a578063cdc23076146100d7575b600080fd5b34801561005057600080fd5b50610059610108565b6040516100669190610160565b60405180910390f35b34801561007b57600080fd5b5061008461010e565b6040516100919190610160565b60405180910390f35b3480156100a657600080fd5b506100c160048036038101906100bc91906101ac565b610114565b6040516100ce9190610160565b60405180910390f35b6100f160048036038101906100ec91906101ac565b610127565b6040516100ff9291906101d9565b60405180910390f35b60005481565b60015481565b6000816000819055506000549050919050565b600080826000819055503460018190555060005460015491509150915091565b6000819050919050565b61015a81610147565b82525050565b60006020820190506101756000830184610151565b92915050565b600080fd5b61018981610147565b811461019457600080fd5b50565b6000813590506101a681610180565b92915050565b6000602082840312156101c2576101c161017b565b5b60006101d084828501610197565b91505092915050565b60006040820190506101ee6000830185610151565b6101fb6020830184610151565b939250505056fea26469706673582212204afeac424d2124507d742e5566203ad8fc350fa75e16109828473cc3f15a14bd64736f6c63430008180033";

type CalleeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CalleeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Callee__factory extends ContractFactory {
  constructor(...args: CalleeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Callee> {
    return super.deploy(overrides || {}) as Promise<Callee>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Callee {
    return super.attach(address) as Callee;
  }
  override connect(signer: Signer): Callee__factory {
    return super.connect(signer) as Callee__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CalleeInterface {
    return new utils.Interface(_abi) as CalleeInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Callee {
    return new Contract(address, _abi, signerOrProvider) as Callee;
  }
}
