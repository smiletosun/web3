/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { OnlyOwner, OnlyOwnerInterface } from "../../contracts/OnlyOwner";

const _abi = [
  {
    inputs: [],
    name: "currntOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owend",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610359806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634fb2e45d146100465780635d8b71da14610062578063825cd6931461006c575b600080fd5b610060600480360381019061005b9190610229565b61008a565b005b61006a61015b565b005b61007461019d565b6040516100819190610265565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610118576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161010f90610303565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101f6826101cb565b9050919050565b610206816101eb565b811461021157600080fd5b50565b600081359050610223816101fd565b92915050565b60006020828403121561023f5761023e6101c6565b5b600061024d84828501610214565b91505092915050565b61025f816101eb565b82525050565b600060208201905061027a6000830184610256565b92915050565b600082825260208201905092915050565b7f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f60008201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b60006102ed602183610280565b91506102f882610291565b604082019050919050565b6000602082019050818103600083015261031c816102e0565b905091905056fea2646970667358221220db023342aab2d8f02b290d4b3af6b483e9cfb83c868ef076feef3bde1cbd2bb264736f6c63430008180033";

type OnlyOwnerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OnlyOwnerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OnlyOwner__factory extends ContractFactory {
  constructor(...args: OnlyOwnerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<OnlyOwner> {
    return super.deploy(overrides || {}) as Promise<OnlyOwner>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): OnlyOwner {
    return super.attach(address) as OnlyOwner;
  }
  override connect(signer: Signer): OnlyOwner__factory {
    return super.connect(signer) as OnlyOwner__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OnlyOwnerInterface {
    return new utils.Interface(_abi) as OnlyOwnerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OnlyOwner {
    return new Contract(address, _abi, signerOrProvider) as OnlyOwner;
  }
}
