/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Ballout,
  BalloutInterface,
} from "../../../contracts/Ballot.sol/Ballout";

const _abi = [
  {
    inputs: [
      {
        internalType: "string[]",
        name: "proposalNames",
        type: "string[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "getAllProposals",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "voteCount",
            type: "uint256",
          },
        ],
        internalType: "struct Ballout.Proposal[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getUser",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "weight",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "voted",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "vote",
            type: "uint256",
          },
        ],
        internalType: "struct Ballout.Voter",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_voter",
        type: "address",
      },
    ],
    name: "giveRightToVote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "proposals",
    outputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "voteCount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposal",
        type: "uint256",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "winnerName",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620015cc380380620015cc833981810160405281019062000037919062000413565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060005b81518110156200017c57600260405180604001604052808484815181106200010f576200010e62000464565b5b60200260200101518152602001600081525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000019081620001619190620006de565b506020820151816001015550508080600101915050620000e2565b5050620007c5565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001e8826200019d565b810181811067ffffffffffffffff821117156200020a5762000209620001ae565b5b80604052505050565b60006200021f62000184565b90506200022d8282620001dd565b919050565b600067ffffffffffffffff82111562000250576200024f620001ae565b5b602082029050602081019050919050565b600080fd5b600080fd5b600067ffffffffffffffff821115620002895762000288620001ae565b5b62000294826200019d565b9050602081019050919050565b60005b83811015620002c1578082015181840152602081019050620002a4565b60008484015250505050565b6000620002e4620002de846200026b565b62000213565b90508281526020810184848401111562000303576200030262000266565b5b62000310848285620002a1565b509392505050565b600082601f83011262000330576200032f62000198565b5b815162000342848260208601620002cd565b91505092915050565b6000620003626200035c8462000232565b62000213565b9050808382526020820190506020840283018581111562000388576200038762000261565b5b835b81811015620003d657805167ffffffffffffffff811115620003b157620003b062000198565b5b808601620003c0898262000318565b855260208501945050506020810190506200038a565b5050509392505050565b600082601f830112620003f857620003f762000198565b5b81516200040a8482602086016200034b565b91505092915050565b6000602082840312156200042c576200042b6200018e565b5b600082015167ffffffffffffffff8111156200044d576200044c62000193565b5b6200045b84828501620003e0565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620004e657607f821691505b602082108103620004fc57620004fb6200049e565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620005667fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000527565b62000572868362000527565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620005bf620005b9620005b3846200058a565b62000594565b6200058a565b9050919050565b6000819050919050565b620005db836200059e565b620005f3620005ea82620005c6565b84845462000534565b825550505050565b600090565b6200060a620005fb565b62000617818484620005d0565b505050565b5b818110156200063f576200063360008262000600565b6001810190506200061d565b5050565b601f8211156200068e57620006588162000502565b620006638462000517565b8101602085101562000673578190505b6200068b620006828562000517565b8301826200061c565b50505b505050565b600082821c905092915050565b6000620006b36000198460080262000693565b1980831691505092915050565b6000620006ce8383620006a0565b9150826002028217905092915050565b620006e98262000493565b67ffffffffffffffff811115620007055762000704620001ae565b5b620007118254620004cd565b6200071e82828562000643565b600060209050601f83116001811462000756576000841562000741578287015190505b6200074d8582620006c0565b865550620007bd565b601f198416620007668662000502565b60005b82811015620007905784890151825560018201915060208501945060208101905062000769565b86831015620007b05784890151620007ac601f891682620006a0565b8355505b6001600288020188555050505b505050505050565b610df780620007d56000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630121b93f14610067578063013cf08b146100835780636f77926b146100b45780639e7b8d61146100e4578063cceb68f514610100578063e2ba53f01461011e575b600080fd5b610081600480360381019061007c91906107ca565b61013c565b005b61009d600480360381019061009891906107ca565b610282565b6040516100ab929190610896565b60405180910390f35b6100ce60048036038101906100c99190610924565b61033e565b6040516100db91906109bd565b60405180910390f35b6100fe60048036038101906100f99190610924565b6103c6565b005b61010861052e565b6040516101159190610b21565b60405180910390f35b610126610629565b6040516101339190610b43565b60405180910390f35b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060010160009054906101000a900460ff16156101d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c890610bb1565b60405180910390fd5b6002805490508210610218576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020f90610c1d565b60405180910390fd5b60018160010160006101000a81548160ff02191690831515021790555081816002018190555080600001546002838154811061025757610256610c3d565b5b906000526020600020906002020160010160008282546102779190610c9b565b925050819055505050565b6002818154811061029257600080fd5b90600052602060002090600202016000915090508060000180546102b590610cfe565b80601f01602080910402602001604051908101604052809291908181526020018280546102e190610cfe565b801561032e5780601f106103035761010080835404028352916020019161032e565b820191906000526020600020905b81548152906001019060200180831161031157829003601f168201915b5050505050908060010154905082565b61034661076c565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806060016040529081600082015481526020016001820160009054906101000a900460ff161515151581526020016002820154815250509050919050565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610454576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044b90610da1565b60405180910390fd5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff16156104e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104db90610bb1565b60405180910390fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555050565b60606002805480602002602001604051908101604052809291908181526020016000905b82821015610620578382906000526020600020906002020160405180604001604052908160008201805461058590610cfe565b80601f01602080910402602001604051908101604052809291908181526020018280546105b190610cfe565b80156105fe5780601f106105d3576101008083540402835291602001916105fe565b820191906000526020600020905b8154815290600101906020018083116105e157829003601f168201915b5050505050815260200160018201548152505081526020019060010190610552565b50505050905090565b606060026106356106e5565b8154811061064657610645610c3d565b5b9060005260206000209060020201600001805461066290610cfe565b80601f016020809104026020016040519081016040528092919081815260200182805461068e90610cfe565b80156106db5780601f106106b0576101008083540402835291602001916106db565b820191906000526020600020905b8154815290600101906020018083116106be57829003601f168201915b5050505050905090565b600080600090506000805b60028054905081101561076357826002828154811061071257610711610c3d565b5b9060005260206000209060020201600101541115610756576002818154811061073e5761073d610c3d565b5b90600052602060002090600202016001015492508091505b80806001019150506106f0565b50809250505090565b604051806060016040528060008152602001600015158152602001600081525090565b600080fd5b6000819050919050565b6107a781610794565b81146107b257600080fd5b50565b6000813590506107c48161079e565b92915050565b6000602082840312156107e0576107df61078f565b5b60006107ee848285016107b5565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610831578082015181840152602081019050610816565b60008484015250505050565b6000601f19601f8301169050919050565b6000610859826107f7565b6108638185610802565b9350610873818560208601610813565b61087c8161083d565b840191505092915050565b61089081610794565b82525050565b600060408201905081810360008301526108b0818561084e565b90506108bf6020830184610887565b9392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108f1826108c6565b9050919050565b610901816108e6565b811461090c57600080fd5b50565b60008135905061091e816108f8565b92915050565b60006020828403121561093a5761093961078f565b5b60006109488482850161090f565b91505092915050565b61095a81610794565b82525050565b60008115159050919050565b61097581610960565b82525050565b6060820160008201516109916000850182610951565b5060208201516109a4602085018261096c565b5060408201516109b76040850182610951565b50505050565b60006060820190506109d2600083018461097b565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000610a20826107f7565b610a2a8185610a04565b9350610a3a818560208601610813565b610a438161083d565b840191505092915050565b60006040830160008301518482036000860152610a6b8282610a15565b9150506020830151610a806020860182610951565b508091505092915050565b6000610a978383610a4e565b905092915050565b6000602082019050919050565b6000610ab7826109d8565b610ac181856109e3565b935083602082028501610ad3856109f4565b8060005b85811015610b0f5784840389528151610af08582610a8b565b9450610afb83610a9f565b925060208a01995050600181019050610ad7565b50829750879550505050505092915050565b60006020820190508181036000830152610b3b8184610aac565b905092915050565b60006020820190508181036000830152610b5d818461084e565b905092915050565b7fe5b7b2e7bb8fe68a95e7a5a8e4ba860000000000000000000000000000000000600082015250565b6000610b9b600f83610802565b9150610ba682610b65565b602082019050919050565b60006020820190508181036000830152610bca81610b8e565b9050919050565b7fe6b2a1e69c89e8bf99e4b8aae68f90e6a1880000000000000000000000000000600082015250565b6000610c07601283610802565b9150610c1282610bd1565b602082019050919050565b60006020820190508181036000830152610c3681610bfa565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ca682610794565b9150610cb183610794565b9250828201905080821115610cc957610cc8610c6c565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610d1657607f821691505b602082108103610d2957610d28610ccf565b5b50919050565b7fe58faae69c89e4b8bbe5b8ade6898de69c89e69d83e58886e9858de68a95e7a560008201527fa8e69d83e588a900000000000000000000000000000000000000000000000000602082015250565b6000610d8b602783610802565b9150610d9682610d2f565b604082019050919050565b60006020820190508181036000830152610dba81610d7e565b905091905056fea2646970667358221220ea4f36524995f02e3fb2b3e867a2a9161c3ea7d2fca924be92b78d77a5b6df8664736f6c63430008180033";

type BalloutConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BalloutConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Ballout__factory extends ContractFactory {
  constructor(...args: BalloutConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    proposalNames: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Ballout> {
    return super.deploy(proposalNames, overrides || {}) as Promise<Ballout>;
  }
  override getDeployTransaction(
    proposalNames: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(proposalNames, overrides || {});
  }
  override attach(address: string): Ballout {
    return super.attach(address) as Ballout;
  }
  override connect(signer: Signer): Ballout__factory {
    return super.connect(signer) as Ballout__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BalloutInterface {
    return new utils.Interface(_abi) as BalloutInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Ballout {
    return new Contract(address, _abi, signerOrProvider) as Ballout;
  }
}
