/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Test, TestInterface } from "../../contracts/Test";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "Log",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "OtherLog",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "sent",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
    ],
    name: "TLog",
    type: "event",
  },
  {
    inputs: [],
    name: "num",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "sendEnth",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "testAssert",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_addr",
        type: "address",
      },
    ],
    name: "testModifier",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_i",
        type: "uint256",
      },
    ],
    name: "testRequire",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_i",
        type: "uint256",
      },
    ],
    name: "testRevert",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052600160005533600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561005657600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506109bc806100a76000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80634e70b1dc1161005b5780634e70b1dc146100c45780634ec6d888146100e25780638da5cb5b146100fe578063b8bd717f1461011c5761007d565b806320987767146100825780632b813bc01461009e5780633a10a01b146100a8575b600080fd5b61009c60048036038101906100979190610527565b61014c565b005b6100a6610192565b005b6100c260048036038101906100bd91906105b2565b6101a6565b005b6100cc6102cb565b6040516100d991906105ee565b60405180910390f35b6100fc60048036038101906100f791906105b2565b6102d1565b005b610106610479565b6040516101139190610618565b60405180910390f35b61013660048036038101906101319190610527565b61049f565b60405161014391906105ee565b60405180910390f35b600a811161018f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018690610690565b60405180910390fd5b50565b60008054146101a4576101a36106b0565b5b565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610215576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020c9061072b565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff16670de0b6b3a7640000604051610244906107a2565b60006040518083038185875af1925050503d8060008114610281576040519150601f19603f3d011682016040523d82523d6000602084013e610286565b606091505b50915091507fb066e3deadcaf3ff1d67628a0bdadc4e413734067b118cadbe8646061eb7fb073383836040516102be93929190610862565b60405180910390a1505050565b60005481565b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610341576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103389061072b565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146103d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c8906108ec565b60405180910390fd5b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f3f7bbd7274669458f0b344be6de06265a8849e62ade4e2ca3a1d9b38347383e160405160405180910390a17f0738f4da267a110d810e6e89fc59e46be6de0c37b1d5cd559b267dc3688e74e03360405161046d9190610958565b60405180910390a15050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600a82116104e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104db90610690565b60405180910390fd5b819050919050565b600080fd5b6000819050919050565b610504816104f1565b811461050f57600080fd5b50565b600081359050610521816104fb565b92915050565b60006020828403121561053d5761053c6104ec565b5b600061054b84828501610512565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061057f82610554565b9050919050565b61058f81610574565b811461059a57600080fd5b50565b6000813590506105ac81610586565b92915050565b6000602082840312156105c8576105c76104ec565b5b60006105d68482850161059d565b91505092915050565b6105e8816104f1565b82525050565b600060208201905061060360008301846105df565b92915050565b61061281610574565b82525050565b600060208201905061062d6000830184610609565b92915050565b600082825260208201905092915050565b7f496e707574206d7573742062652067726561746572207468616e203130000000600082015250565b600061067a601d83610633565b915061068582610644565b602082019050919050565b600060208201905081810360008301526106a98161066d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f496e76616c696420616464726573730000000000000000000000000000000000600082015250565b6000610715600f83610633565b9150610720826106df565b602082019050919050565b6000602082019050818103600083015261074481610708565b9050919050565b600081905092915050565b7f7373780000000000000000000000000000000000000000000000000000000000600082015250565b600061078c60038361074b565b915061079782610756565b600382019050919050565b60006107ad8261077f565b9150819050919050565b60008115159050919050565b6107cc816107b7565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561080c5780820151818401526020810190506107f1565b60008484015250505050565b6000601f19601f8301169050919050565b6000610834826107d2565b61083e81856107dd565b935061084e8185602086016107ee565b61085781610818565b840191505092915050565b60006060820190506108776000830186610609565b61088460208301856107c3565b81810360408301526108968184610829565b9050949350505050565b7f4e6f7420746865206f776e657200000000000000000000000000000000000000600082015250565b60006108d6600d83610633565b91506108e1826108a0565b602082019050919050565b60006020820190508181036000830152610905816108c9565b9050919050565b7f6368616e676564206f776e657220746f20000000000000000000000000000000600082015250565b6000610942601183610633565b915061094d8261090c565b602082019050919050565b600060408201905061096d6000830184610609565b818103602083015261097e81610935565b90509291505056fea26469706673582212207525843c2cfc4279389b72577215ca01cbbe077b815901fbe17f3f854298e6ae64736f6c63430008180033";

type TestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Test__factory extends ContractFactory {
  constructor(...args: TestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Test> {
    return super.deploy(overrides || {}) as Promise<Test>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Test {
    return super.attach(address) as Test;
  }
  override connect(signer: Signer): Test__factory {
    return super.connect(signer) as Test__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestInterface {
    return new utils.Interface(_abi) as TestInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Test {
    return new Contract(address, _abi, signerOrProvider) as Test;
  }
}
