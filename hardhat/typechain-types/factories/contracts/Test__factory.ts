/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Test, TestInterface } from "../../contracts/Test";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "Log",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "OtherLog",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "sent",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
    ],
    name: "TLog",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "string",
        name: "args",
        type: "string",
      },
      {
        internalType: "string",
        name: "_message",
        type: "string",
      },
    ],
    name: "callTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "string",
        name: "args",
        type: "string",
      },
      {
        internalType: "string",
        name: "_message",
        type: "string",
      },
    ],
    name: "delegateCallTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
    ],
    name: "enCode",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMessage",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "message",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "num",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "sendEnth",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "testAssert",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_addr",
        type: "address",
      },
    ],
    name: "testModifier",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_i",
        type: "uint256",
      },
    ],
    name: "testRequire",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_i",
        type: "uint256",
      },
    ],
    name: "testRevert",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526040518060400160405280600d81526020017f48656c6c6f2c20576f726c642100000000000000000000000000000000000000815250600090816200004a91906200035f565b506001805533600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156200009d57600080fd5b5033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000446565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200016757607f821691505b6020821081036200017d576200017c6200011f565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620001e77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620001a8565b620001f38683620001a8565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620002406200023a62000234846200020b565b62000215565b6200020b565b9050919050565b6000819050919050565b6200025c836200021f565b620002746200026b8262000247565b848454620001b5565b825550505050565b600090565b6200028b6200027c565b6200029881848462000251565b505050565b5b81811015620002c057620002b460008262000281565b6001810190506200029e565b5050565b601f8211156200030f57620002d98162000183565b620002e48462000198565b81016020851015620002f4578190505b6200030c620003038562000198565b8301826200029d565b50505b505050565b600082821c905092915050565b6000620003346000198460080262000314565b1980831691505092915050565b60006200034f838362000321565b9150826002028217905092915050565b6200036a82620000e5565b67ffffffffffffffff811115620003865762000385620000f0565b5b6200039282546200014e565b6200039f828285620002c4565b600060209050601f831160018114620003d75760008415620003c2578287015190505b620003ce858262000341565b8655506200043e565b601f198416620003e78662000183565b60005b828110156200041157848901518255600182019150602085019450602081019050620003ea565b868310156200043157848901516200042d601f89168262000321565b8355505b6001600288020188555050505b505050505050565b61129580620004566000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063b8bd717f11610071578063b8bd717f14610153578063ccda810c14610183578063ce6d41de146101b3578063cfbba66e146101d1578063e21f37ce146101ed578063fe01b4e61461020b576100b4565b806320987767146100b95780632b813bc0146100d55780633a10a01b146100df5780634e70b1dc146100fb5780634ec6d888146101195780638da5cb5b14610135575b600080fd5b6100d360048036038101906100ce91906109e5565b610227565b005b6100dd61026d565b005b6100f960048036038101906100f49190610a70565b610282565b005b6101036103a7565b6040516101109190610aac565b60405180910390f35b610133600480360381019061012e9190610a70565b6103ad565b005b61013d610555565b60405161014a9190610ad6565b60405180910390f35b61016d600480360381019061016891906109e5565b61057b565b60405161017a9190610aac565b60405180910390f35b61019d600480360381019061019891906109e5565b6105c8565b6040516101aa9190610b81565b60405180910390f35b6101bb6105f1565b6040516101c89190610bf8565b60405180910390f35b6101eb60048036038101906101e69190610d4f565b610683565b005b6101f56107c7565b6040516102029190610bf8565b60405180910390f35b61022560048036038101906102209190610d4f565b610855565b005b600a811161026a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026190610e26565b60405180910390fd5b50565b6000600154146102805761027f610e46565b5b565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036102f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e890610ec1565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff16670de0b6b3a764000060405161032090610f38565b60006040518083038185875af1925050503d806000811461035d576040519150601f19603f3d011682016040523d82523d6000602084013e610362565b606091505b50915091507fb066e3deadcaf3ff1d67628a0bdadc4e413734067b118cadbe8646061eb7fb0733838360405161039a93929190610f68565b60405180910390a1505050565b60015481565b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361041d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041490610ec1565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146104ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a490610ff2565b60405180910390fd5b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f3f7bbd7274669458f0b344be6de06265a8849e62ade4e2ca3a1d9b38347383e160405160405180910390a17f0738f4da267a110d810e6e89fc59e46be6de0c37b1d5cd559b267dc3688e74e033604051610549919061105e565b60405180910390a15050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600a82116105c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b790610e26565b60405180910390fd5b819050919050565b6060816040516020016105db9190610aac565b6040516020818303038152906040529050919050565b606060008054610600906110bb565b80601f016020809104026020016040519081016040528092919081815260200182805461062c906110bb565b80156106795780601f1061064e57610100808354040283529160200191610679565b820191906000526020600020905b81548152906001019060200180831161065c57829003601f168201915b5050505050905090565b600082826040516024016106979190610bf8565b604051602081830303815290604052906040516106b49190611128565b60405180910390207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008473ffffffffffffffffffffffffffffffffffffffff16670de0b6b3a76400008360405161073b9190611170565b6000604051808303818686f4925050503d8060008114610777576040519150601f19603f3d011682016040523d82523d6000602084013e61077c565b606091505b50509050806107c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b7906111d3565b60405180910390fd5b5050505050565b600080546107d4906110bb565b80601f0160208091040260200160405190810160405280929190818152602001828054610800906110bb565b801561084d5780601f106108225761010080835404028352916020019161084d565b820191906000526020600020905b81548152906001019060200180831161083057829003601f168201915b505050505081565b600082826040516024016108699190610bf8565b604051602081830303815290604052906040516108869190611128565b60405180910390207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008473ffffffffffffffffffffffffffffffffffffffff16670de0b6b3a76400008360405161090d9190611170565b60006040518083038160008787f1925050503d806000811461094b576040519150601f19603f3d011682016040523d82523d6000602084013e610950565b606091505b5050905080610994576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098b9061123f565b60405180910390fd5b5050505050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6109c2816109af565b81146109cd57600080fd5b50565b6000813590506109df816109b9565b92915050565b6000602082840312156109fb576109fa6109a5565b5b6000610a09848285016109d0565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a3d82610a12565b9050919050565b610a4d81610a32565b8114610a5857600080fd5b50565b600081359050610a6a81610a44565b92915050565b600060208284031215610a8657610a856109a5565b5b6000610a9484828501610a5b565b91505092915050565b610aa6816109af565b82525050565b6000602082019050610ac16000830184610a9d565b92915050565b610ad081610a32565b82525050565b6000602082019050610aeb6000830184610ac7565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b2b578082015181840152602081019050610b10565b60008484015250505050565b6000601f19601f8301169050919050565b6000610b5382610af1565b610b5d8185610afc565b9350610b6d818560208601610b0d565b610b7681610b37565b840191505092915050565b60006020820190508181036000830152610b9b8184610b48565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000610bca82610ba3565b610bd48185610bae565b9350610be4818560208601610b0d565b610bed81610b37565b840191505092915050565b60006020820190508181036000830152610c128184610bbf565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c5c82610b37565b810181811067ffffffffffffffff82111715610c7b57610c7a610c24565b5b80604052505050565b6000610c8e61099b565b9050610c9a8282610c53565b919050565b600067ffffffffffffffff821115610cba57610cb9610c24565b5b610cc382610b37565b9050602081019050919050565b82818337600083830152505050565b6000610cf2610ced84610c9f565b610c84565b905082815260208101848484011115610d0e57610d0d610c1f565b5b610d19848285610cd0565b509392505050565b600082601f830112610d3657610d35610c1a565b5b8135610d46848260208601610cdf565b91505092915050565b600080600060608486031215610d6857610d676109a5565b5b6000610d7686828701610a5b565b935050602084013567ffffffffffffffff811115610d9757610d966109aa565b5b610da386828701610d21565b925050604084013567ffffffffffffffff811115610dc457610dc36109aa565b5b610dd086828701610d21565b9150509250925092565b7f496e707574206d7573742062652067726561746572207468616e203130000000600082015250565b6000610e10601d83610bae565b9150610e1b82610dda565b602082019050919050565b60006020820190508181036000830152610e3f81610e03565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f496e76616c696420616464726573730000000000000000000000000000000000600082015250565b6000610eab600f83610bae565b9150610eb682610e75565b602082019050919050565b60006020820190508181036000830152610eda81610e9e565b9050919050565b600081905092915050565b7f7373780000000000000000000000000000000000000000000000000000000000600082015250565b6000610f22600383610ee1565b9150610f2d82610eec565b600382019050919050565b6000610f4382610f15565b9150819050919050565b60008115159050919050565b610f6281610f4d565b82525050565b6000606082019050610f7d6000830186610ac7565b610f8a6020830185610f59565b8181036040830152610f9c8184610b48565b9050949350505050565b7f4e6f7420746865206f776e657200000000000000000000000000000000000000600082015250565b6000610fdc600d83610bae565b9150610fe782610fa6565b602082019050919050565b6000602082019050818103600083015261100b81610fcf565b9050919050565b7f6368616e676564206f776e657220746f20000000000000000000000000000000600082015250565b6000611048601183610bae565b915061105382611012565b602082019050919050565b60006040820190506110736000830184610ac7565b81810360208301526110848161103b565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806110d357607f821691505b6020821081036110e6576110e561108c565b5b50919050565b600081905092915050565b600061110282610ba3565b61110c81856110ec565b935061111c818560208601610b0d565b80840191505092915050565b600061113482846110f7565b915081905092915050565b600061114a82610af1565b6111548185610ee1565b9350611164818560208601610b0d565b80840191505092915050565b600061117c828461113f565b915081905092915050565b7f466f727761726465642063616c6c206661696c65642e00000000000000000000600082015250565b60006111bd601683610bae565b91506111c882611187565b602082019050919050565b600060208201905081810360008301526111ec816111b0565b9050919050565b7f63616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000611229600b83610bae565b9150611234826111f3565b602082019050919050565b600060208201905081810360008301526112588161121c565b905091905056fea2646970667358221220eefc78695a8850646b4eeafcb4feff0429660476e17e2899d2b71d29c091dc2f64736f6c63430008180033";

type TestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Test__factory extends ContractFactory {
  constructor(...args: TestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Test> {
    return super.deploy(overrides || {}) as Promise<Test>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Test {
    return super.attach(address) as Test;
  }
  override connect(signer: Signer): Test__factory {
    return super.connect(signer) as Test__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestInterface {
    return new utils.Interface(_abi) as TestInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Test {
    return new Contract(address, _abi, signerOrProvider) as Test;
  }
}
