/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Test, TestInterface } from "../../contracts/Test";

const _abi = [
  {
    inputs: [],
    name: "num",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "testAssert",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_i",
        type: "uint256",
      },
    ],
    name: "testRequire",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_i",
        type: "uint256",
      },
    ],
    name: "testRevert",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052600160005534801561001557600080fd5b506102e6806100256000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806320987767146100515780632b813bc01461006d5780634e70b1dc14610077578063b8bd717f14610095575b600080fd5b61006b600480360381019061006691906101ad565b6100c5565b005b61007561010b565b005b61007f61011f565b60405161008c91906101e9565b60405180910390f35b6100af60048036038101906100aa91906101ad565b610125565b6040516100bc91906101e9565b60405180910390f35b600a8111610108576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100ff90610261565b60405180910390fd5b50565b600080541461011d5761011c610281565b5b565b60005481565b6000600a821161016a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016190610261565b60405180910390fd5b819050919050565b600080fd5b6000819050919050565b61018a81610177565b811461019557600080fd5b50565b6000813590506101a781610181565b92915050565b6000602082840312156101c3576101c2610172565b5b60006101d184828501610198565b91505092915050565b6101e381610177565b82525050565b60006020820190506101fe60008301846101da565b92915050565b600082825260208201905092915050565b7f496e707574206d7573742062652067726561746572207468616e203130000000600082015250565b600061024b601d83610204565b915061025682610215565b602082019050919050565b6000602082019050818103600083015261027a8161023e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fdfea26469706673582212202764cdf3f28f7b29d5e3a1a345b4607b1de1cd9769e2ee9b364b947c82fdd1dc64736f6c63430008180033";

type TestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Test__factory extends ContractFactory {
  constructor(...args: TestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Test> {
    return super.deploy(overrides || {}) as Promise<Test>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Test {
    return super.attach(address) as Test;
  }
  override connect(signer: Signer): Test__factory {
    return super.connect(signer) as Test__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestInterface {
    return new utils.Interface(_abi) as TestInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Test {
    return new Contract(address, _abi, signerOrProvider) as Test;
  }
}
