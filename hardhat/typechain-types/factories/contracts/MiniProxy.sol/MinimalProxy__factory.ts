/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MinimalProxy,
  MinimalProxyInterface,
} from "../../../contracts/MiniProxy.sol/MinimalProxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "clone",
    outputs: [
      {
        internalType: "address",
        name: "result",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506101ba806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638124b78e14610030575b600080fd5b61004a6004803603810190610045919061012d565b610060565b6040516100579190610169565b60405180910390f35b6000808260601b90506040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528160148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f092505050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100fa826100cf565b9050919050565b61010a816100ef565b811461011557600080fd5b50565b60008135905061012781610101565b92915050565b600060208284031215610143576101426100ca565b5b600061015184828501610118565b91505092915050565b610163816100ef565b82525050565b600060208201905061017e600083018461015a565b9291505056fea26469706673582212208ed4a5c23e5be3c07e00d9543ffe1235a759a713ca54e6088a2f3b9ba2618d6d64736f6c63430008180033";

type MinimalProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MinimalProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MinimalProxy__factory extends ContractFactory {
  constructor(...args: MinimalProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MinimalProxy> {
    return super.deploy(overrides || {}) as Promise<MinimalProxy>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MinimalProxy {
    return super.attach(address) as MinimalProxy;
  }
  override connect(signer: Signer): MinimalProxy__factory {
    return super.connect(signer) as MinimalProxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MinimalProxyInterface {
    return new utils.Interface(_abi) as MinimalProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MinimalProxy {
    return new Contract(address, _abi, signerOrProvider) as MinimalProxy;
  }
}
